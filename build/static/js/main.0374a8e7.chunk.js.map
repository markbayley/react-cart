{"version":3,"sources":["components/navbar.jsx","components/counter.jsx","components/counters.jsx","App.js","serviceWorker.js","index.js"],"names":["NavBar","totalCounters","console","log","className","href","class","Counter","prevProps","prevState","counter","value","this","props","src","alt","getBadgeClasses","formatCount","onClick","onDecrement","onIncrement","onDelete","id","classes","Component","Counters","onReset","counters","map","key","App","state","handleIncrement","index","indexOf","setState","handleDecrement","handleReset","c","handleDelete","counterId","filter","Fragment","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0374a8e7.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\n// Stateless Functional Component\r\nconst NavBar = ({ totalCounters}) => {\r\n    console.log('NavBar - Rendered');\r\n      \r\n        return (\r\n            <nav className=\"navbar navbar-dark bg-dark\">\r\n             <a className=\"navbar-brand\" href=\"index.html\">\r\n             <i class=\"fas fa-shopping-cart\"></i>{\" \"}\r\n              <span className=\"badge badge-pill badge-secondary\">\r\n              {totalCounters}\r\n              </span></a>\r\n             \r\n              <a className=\"navbar-brand\" href=\"https://inblockdesign.com\">\r\n              <button className=\"btn btn-sm\"><i class=\"fas fa-home\"></i></button>\r\n              </a>\r\n            </nav>  \r\n        );\r\n    \r\n};\r\n \r\nexport default NavBar;","import React, { Component } from 'react';\r\n\r\nclass Counter extends Component {\r\n    componentDidUpdate(prevProps, prevState) {\r\n        console.log(\"prevProps\", prevProps);\r\n        console.log(\"prevState\", prevState);\r\n        if (prevProps.counter.value !== this.props.counter.value)  {\r\n            // Ajax call and get new data from the server           \r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        console.log('Counter - Unmount');\r\n    }\r\n\r\n    render() {\r\n        console.log('Counter - Rendered');\r\n\r\n        return (\r\n            \r\n            <div className=\"counters\">\r\n                 <img src=\"logo50.png\" alt=\"\" />\r\n                <span className={this.getBadgeClasses()}>{this.formatCount()}</span>\r\n                <button\r\n                    onClick={() => this.props.onDecrement(this.props.counter)}\r\n                    className=\"btn btn-secondary btn-sm m-2\"\r\n                >\r\n                    -\r\n                </button>\r\n               \r\n                <button\r\n                    onClick={() => this.props.onIncrement(this.props.counter)}\r\n                    className=\"btn btn-secondary btn-sm m-2\"\r\n                >\r\n                    +\r\n                </button>\r\n                <button\r\n                    onClick={() => this.props.onDelete(this.props.counter.id)}\r\n                    className=\"btn btn-danger btn-sm m-2\"\r\n                >\r\n                     Delete\r\n                </button>\r\n                \r\n            </div >\r\n        );\r\n    }\r\n\r\n    getBadgeClasses() {\r\n        let classes = \"badge m-2 badge-\";\r\n        classes += this.props.counter.value === 0 ? \"warning\" : \"primary\";\r\n        return classes;\r\n    }\r\n\r\n    formatCount() {\r\n        const { value } = this.props.counter;\r\n        return value === 0 ? \"0\" : value;\r\n    }\r\n}\r\n\r\nexport default Counter;","import React, { Component } from 'react';\r\nimport Counter from './counter';\r\n\r\n\r\nclass Counters extends Component {\r\n    render() {\r\n         console.log('Counters - Rendered');\r\n\r\n        const { onReset, counters, onDelete, onIncrement, onDecrement } = this.props;\r\n\r\n        return (\r\n            <div>\r\n               \r\n                {counters.map(counter => (\r\n                    <Counter\r\n                        key={counter.id}\r\n                        onDelete={onDelete}\r\n                        onIncrement={onIncrement}\r\n                        onDecrement={onDecrement}\r\n                        counter={counter}\r\n                    />                \r\n                ))}\r\n\r\n              \r\n                <button\r\n                    onClick={onReset}\r\n                    className=\"btn btn-warning btn-sm m-2 reset\">Reset\r\n                </button>\r\n\r\n                \r\n\r\n               \r\n            </div>\r\n            \r\n        );\r\n    }\r\n}\r\n\r\nexport default Counters;","import React, { Component } from 'react';\nimport NavBar from './components/navbar';\nimport Counters from './components/counters';\nimport './App.css';\n\nclass App extends Component {\n\n  state = {\n    counters: [\n        { id: 1, value: 0 },\n        { id: 2, value: 0 },\n        { id: 3, value: 0 },\n        { id: 4, value: 0 },\n    ]\n};\n\nconstructor() {\n  super();\n  console.log('App - Constructor');\n}\n\ncomponentDidMount() {\n  console.log('App - Mounted');\n}\n\nhandleIncrement = counter => {\n    const counters = [...this.state.counters];\n    const index = counters.indexOf(counter);\n    counters[index] = { ...counter };\n    counters[index].value++;\n    this.setState({ counters });\n\n};\n\nhandleDecrement = counter => {\n  const counters = [...this.state.counters];\n  const index = counters.indexOf(counter);\n  counters[index] = { ...counter };\n\n  if(counters[index].value > 0) {\n    counters[index].value--;\n    this.setState({ counters });\n  }\n \n  \n\n};\n\nhandleReset = () => {\n    const counters = this.state.counters.map(c => {\n        c.value = 0;\n        return c;\n    });\n    this.setState({ counters });\n};\n\nhandleDelete = counterId => {\n    const counters = this.state.counters.filter(c => c.id !== counterId);\n    this.setState({ counters });\n};\n\n  render() {\n    console.log(\"App - Rendered\");\n\n    return (\n      <React.Fragment>\n     \n      <NavBar totalCounters={this.state.counters.filter(c => c.value > 0).length}\n      />\n     \n      <main className=\"container\">\n       <Counters\n         counters={this.state.counters} \n         onReset={this.handleReset}\n         onIncrement={this.handleIncrement}\n         onDecrement={this.handleDecrement}\n         onDelete={this.handleDelete}\n       />\n      </main> \n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render( < App / > , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();"],"sourceRoot":""}